javaScript 

1 Capitulo

<meta charset="UTF-8">
Estamos indicando ao navegador como deve ser a interpretação das cadeias de caracteres, ou seja, 
do texto que está sendo exibido. Portanto, a simples adição desta tag resolverá o problema de acentuação!

<h1></h1>
 o H1 possui um destaque maior, uma fonte maior, e é geralmente o elemento de texto mais visível da página. 

 <br> 
 Pula linha 

 <a> </a>
 Para criar uma âncora HTML você deve adicionar uma tag <a> com o atributo name. O conteúdo deste atributo é a sua âncora. 
 Para acessá-lo você deverá criar um link onde o atributo href estará preenchido com #nome-da-ancora.

<a href="">aqui</a>
Por meio do atributo href, indicaremos o endereço do link web

alert("");
O JavaScript nos permite exibir um pop-up na tela, que será de alerta. Precisaremos utilizar uma instrução da 
linguagem indicando que um alerta deverá ser exibido

<script></script>
O elemento HTML é usado para incluir ou referenciar um script executável.
______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

2 Capitulo 

document.write()
A palavra document significa, em português, "documento". Nossa página HTML, nosso programa, é um documento. 
Já a palavra write corresponde à palavra "escrever". O write recebe parênteses ao final, ou seja, ele aceita 
receber algo para escrever no documento. Como vimos, o texto no JavaScript é incluído entre aspas.

string
O texto é chamado de string, tanto em JS como em outras linguagens de programação. Escreveremos a seguinte
 mensagem: "A idade do Flávio é"' dentro das aspas é string.

 *****CONCATENAÇÃO*****


O JavaScript entenderá isso como um número, ou um texto? Ele interpretará como um texto, porque está entre 
aspas. Faremos uma operação de adição, onde ambos os números serão colocados entre aspas:
______________________
<script>   
    document.write("A idade do Flávio é ");
    document.write("18" + "20");
</script>
______________________

Cada número é interpretado como uma string, sendo assim, quando será a soma de "18" + "20"? Salvaremos o programa, 
retornaremos à página e a recarregaremos. Temos o seguinte resultado:

A idade do Flávio é 1820

Quando temos uma operação de soma envolvendo texto, o JavaScript não entende se tratar de um número, e portanto 
realiza uma operação à qual damos o nome de concatenação. Isto significa que ele juntou um texto ao outro, o que 
resultou em 1820. Este é então passado para o write, que o imprime desta forma.

Temos o comando document.write, e precisamos passar para ele o que desejamos imprimir. 
Da forma como escrevemos, ele entenderá que queremos imprimir a concatenação do número 18 com 20. Portanto, 
a primeira operação realizada pelo JavaScript é unir estes dois números para, em seguida, informar ao write 
que ele deve imprimir.

O que acontece se tirarmos as aspas em apenas um dos números?

______________________
document.write("18" + 20);
______________________
Estamos tentando somar um texto com um número. Uma string somada a outra resulta em uma concatenação, um número 
somado a outro resulta na soma numérica dos dois, mas quando temos uma string a ser somada com um número, 
se testarmos salvando e recarregando a página, teremos: A idade do Flávio é 1820
Aconteceu que o JavaScript, ao receber um texto e um número, converte este último para texto, resultando em 1820. 
Ou seja, quando há texto e número, ele converte tudo para texto.

Linha 42 e 43 no exercicio de concatenação tem mais exemplos.
texto acima é do alura!

Uma boa prática é terminar uma instrução com ponto e vírgula;

na hora de executar uma conta de matematica, não esquecer de colocar entre parênteses()!

______________________
<meta charset="UTF-8">
<script>
    document.write("Estou escrevendo do mundo JavaScript no mundo HTML");
</script>
______________________
Observe a instrução document.write que recebe entre () o texto: "Estou escrevendo do mundo JavaScript no mundo HTML". 
Quando usamos document.write, dentro de script, estamos, na verdade, escrevendo no mundo HTML, ou seja, o que veremos é um resultado HTML.
Para quem está começando pode parecer estranho, visto que conseguimos fazer a mesma coisa escrevendo o texto 
diretamente no mundo HTML como no exemplo abaixo:

______________________
<meta charset="UTF-8">
Estou escrevendo do mundo JavaScript no mundo HTML
<script>

</script>
____________________

Lembre-se que tudo que estiver entre as TAG's <script> e </script> é considerado pelo navegador como código JavaScript e tudo que estiver 
fora das TAG's, não importa em que lugar, é código HTML. Mais um exemplo:

_____________________
<meta charset="UTF-8">
Estou escrevendo do mundo JavaScript no mundo HTML
<script>

</script>
Aqui também é mundo HTML, porque esta fora da TAG script
______________________

A vantagem é que com document.write podemos passar o resultado de um cálculo entre outras coisas de maneira dinâmica já que o mundo HTML 
não é capaz de realizar operações matemáticas.
Desse modo, podemos fazer o seguinte:

______________________
<meta charset="UTF-8">
<script>
    document.write(10 + 20);
</script>
______________________

Nesse caso, o document.write recebe dentro de () o resultado da operação que é 30. O que o document.write faz é alterar a página de 
maneira a escrever o que quiser no mundo HTML. Isso que estamos escrevendo pode ser o resultado de uma lógica de programação mais complexa!
Quer mais uma prova de que document.write pertence ao mundo JavaScript e consegue escrever no mundo HTML? Vejamos mais um exemplo:

<meta charset="UTF-8">
<script>
    document.write("<h1>Seja bem-vindo</h1>");
</script>

Veja que estamos escrevendo do mundo JavaScript no mundo HTML o texto "<h1>Seja bem-vindo</h1>". Se isso faz parte do mundo HTML, o navegador 
irá interpretar o código como HTML e colocará o texto em destaque pois usamos a TAG <h1>. O resultado é o mesmo que se tivéssemos escrito
diretamente no mundo HTML:

<meta charset="UTF-8">
<h1>Seja bem-vindo</h1>
<script>
</script>

Por fim, não podemos escrever no mundo HTML instruções JavaScript:
<meta charset="UTF-8">
document.write("Seja bem-vindo");
<script>
</script>

O HTML não entende que deve exibir o texto passado pela instrução, ele imprime a instrução e não seu resultado! Sendo assim, fique atento sempre 
que escrever seu código.

texto acima é da alura!!!!!

______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________ 

3 CAPITULO 

Variaveis 

Uma variável pode guardar praticamente o que você quiser: um número, uma string ou outro pedaço de código. Sabemos que é possível calcularmos 
a média das idades usando a frase "A média das idades é" e concatenando com a soma das idades dividida pelo número de indivíduos.

var variavel = variavel;
______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

Capitulo 4


O resultado não será um número exato, e para arredondarmos, podemos utilizar
Math.round()
document.write(Math.round(3/4)); 

Funções 
Para declararmos uma função, utilizaremos o termo em inglês function, seguido de um nome, no caso, pulaLinha

<script>EXEMPLO

    function pulaLinha() {

        document.write("<br>");
        document.write("<br>");
        }
//...
</script>EXEMPLO

oque é um escopo?

Existe dois tipos de escopo: escopo local e o escopo global.

O escopo define aone sua variavel 

Lembre-se de colocar o código dentro da função, com um recuo sempre mais à direita e utilize o TAB do 
seu teclado para criar esse recuo. Esse processo é conhecido como indentação do código (neologismo do inglês to indent). 
É importante que a indentação esteja correta para facilitar a leitura do programa.

______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
 
 CAPITULO 5

 Temos as seguintes afirmativas sobre a função prompt.

A) Ela é uma função que recebe parâmetro e não possui retorno.

B) Ela é uma função que não recebe parâmetro e possui retorno.

C) Ela é uma função que nem recebe parâmetro e nem possui retorno.

D) Ela é uma função que recebe parâmetro e possui retorno.

Qual das afirmações acima é verdadeira?

R= D) A função prompt é a primeira forma que aprendemos para capturar a entrada do usuário.

____________________

    Como a função prompt sempre retorna o que digitamos no formato texto, ou seja, como um string, 
    é uma boa prática sempre convertermos o valor digitado para número quando nossa intenção é ler um número. 
    Vamos analisar esta instrução:

     var convidados = parseInt(prompt("Número de convidados"));
     A função prompt retorna o que digitamos como string e esse retorno é passado para parseInt. 
     É esta função que recebe uma string e a converte para número. Agora, como temos dois números ligados, 
     não acontecerá mais a concatenação, mas sim a soma.

*****EXEMPLO*****
 
  var a = parseInt("10");
  var b = parseInt("Calopsita");
  var c = parseInt(10);

A variável `a` recebe o número 10 retornado por `parseInt`.

A variável `b` recebe `NaN` (not a number) retornado por `parseInt`.

A variável `c` recebe 10, número, retornado por `parseInt`.

A variável a recebe o número 10 retornado por parseInt. Veja que a função esta recebendo a string "10". Ela converte a string em um número.

A variável b recebe NaN (not a number) retornado por parseInt. Isso é verdade, porque parseInt está recebendo a string "Calopsita". É impossível converter esse texto para número, pois não há uma representação numérica para ele, como foi o caso de a.

A variável c recebe 10, número, retornado por parseInt. Quando parseInt recebe um número e não uma string, ele devolve o mesmo número, ou seja, não realiza conversão alguma. Não dá erro, funciona.

=========

Sabemos que operações lógicas podem resultar em true (verdadeiro) ou false (falso). Sendo assim, temos as seguintes operações:

a) 1 == 1
b) 10 < 11
c) 1 >= 1
d) 2 <= 1
e) 9 > 8

a) true
b) true
c) true
d) false
e) true

Vejamos cada operação:

a) 1 == 1 é true, porque 1 é igual a 1.

b) 10 < 11 é true, porque 10 é menor que 11.

c) 1 >= 1 é true, porque 1 é maior ou igual a 1.

d) 2 <= 1 é false, porque 2 não é menor ou igual a 1.

e) 9 > 8 é true, porque 9 é maior que 8.
______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________  
CAPITULO 6


Aprendemos a utilizar parseInt() para converter um texto em número. Certo? Contudo, ele converte um texto para um número inteiro e nem sempre queremos abdicar dos números decimais.
 Vejamos um exemplo:

var numero = parseInt("12.13");

O valor de numero será 12. Para que as casas decimais sejam mantidas, usamos o parseFloat():
var numero = parseFloat("12.13");

O valor de numero será 12.13.

Não é necessário usar o parseFloat() quando lemos os dados de peso e altura no cálculo do IMC, são como operações de divisão e multiplicação o JavaScript já realiza a conversão 
implícita para nós. Contudo, é uma boa prática usar parseInt() ou parseFloat() se queremos ler números inteiros ou decimais fornecido pela função prompt. Nem sempre a conversão 
implícita vai dar certo, como é o caso do número de vitórias e empates.


______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

CAPITULO 7

A primeira ferramenta de repetição que aprenderemos é chamada while, que recebe true:

var anoCopa = 1930;

while(true) {

    alert("Teve copa em " + anoCopa);
    anoCopa = anoCopa + 4;

}

alert("FIM");

O while(true) indica que sempre será repetido o conteúdo do bloco dessa função. Se o while receber false, nada será repetido. Se salvarmos o programa, e recarregarmos a página, somente será exibido um alerta, com a mensagem FIM. A repetição não foi exibida.

Se trocarmos o false por true, significa que, enquanto isso for verdadeiro, haverá repetição, portanto temos
______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

CAPITULO 8

Retornaremos ao navegador e abriremos nosso programa. Nosso objetivo é exibir, no canto superior esquerdo da tela, um campo de entrada para o usuário, acompanhado de um botão. Criaremos isto em HTML, quando utilizamos o <input/>, fazendo com que seja aberto um campo 
para entrada de texto no navegador.
A palavra "input" vem do inglês, e sua tradução é "entrada". Em seguida, criaremos um botão, e a palavra em inglês para isso é "button"

<meta charset="UTF-8">

<input/>

<script>

</script>

Aprendemos que é através de document.querySelector que buscamos um elemento (TAG) no mundo HTML e o trazemos para o mundo JavaScript. 
No caso, é através da variável button, aquela que recebeu o retorno de document.querySelector que temos acesso à TAG <button>. Existem
 outros termos técnicos para tudo o que aconteceu aqui, mas eles não nos ajudam com lógica de programação.

Muito bem, agora que temos o botão, se quisermos que ele chame a função tchau quando for clicado, precisamos associar a função ao botão 
atribuindo a função à button.onclick. Mas cuidado, você deve fazer:
    button.onclick = tchau;
 ______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________   


CAPITULO 9

Como já sabíamos quais eram os itens do array, os declarávamos entre colchetes ([]) como fazíamos anteriormente. A partir de agora, como
queremos que sejam números aleatórios.
Tudo que é passado para o console.log() é visualizado apenas se o console do navegador for aberto. Salvaremos o programa e retornaremos 
ao navegador para recarregarmos a página. Abriremos o console, onde veremos o array com os seguintes números:

Array[5]
0: 9
1: 3
2: 4
3: 4
4:10
lenght: 5
__proto__: Array[0]

Se quisermos adicionar mais um item no array de frutas, o que devemos fazer?
frutas.push("abacate");
Todo array possui a função push que permite "empurrar" elementos para dentro da lista.
_______________________________________________________________________________________________________________________________________